{"version":3,"sources":["Components/styles.module.css","Components/loading.svg","Components/canvas.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Canvas","state","trimmedDataURL","sigPad","clear","trim","setState","getTrimmedCanvas","toDataURL","data","char","fetch","method","body","JSON","stringify","then","res","json","console","log","this","className","styles","container","sigContainer","canvasProps","ref","minWidth","maxWidth","buttons","onClick","src","loading","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,aAAe,6BAA6B,OAAS,uBAAuB,QAAU,wBAAwB,SAAW,yBAAyB,QAAU,0B,mBCDpND,EAAOC,QAAU,IAA0B,qC,6PCwE5BC,E,YAjEb,aAAe,IAAD,8BACZ,+CAHFC,MAAQ,CAAEC,eAAgB,MAEZ,EADdC,OAAS,GACK,EAKdC,MAAQ,WACN,EAAKD,OAAOC,SANA,EAQdC,KAAO,WACL,EAAKC,SACH,CAAEJ,eAAgB,EAAKC,OAAOI,mBAAmBC,UAAU,cAC3D,WAEE,IAAIC,EAAO,yBAA2B,EAAKR,MAAMC,eAEjD,OADA,EAAKI,SAAS,CAACI,KAAM,MACdC,MAAM,0CAA2C,CACtDC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,KAEpBO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAP,GACJ,EAAKH,SAAS,CAAEI,KAAMD,GAAQ,WAC5BU,QAAQC,IAAI,mBApBtB,EAAKnB,MAAMC,eAAiB,KAC5B,EAAKD,MAAMS,KAAO,IAHN,E,sEA4BJ,IAAD,OACkBW,KAAKpB,MAAxBC,eACN,OACE,6BACA,yBAAKoB,UAAWC,IAAOC,WACrB,yBAAKF,UAAWC,IAAOE,cACnB,kBAAC,IAAD,CACEC,YAAa,CAAEJ,UAAWC,IAAOpB,OAAQ,UACzCwB,IAAK,SAAAA,GACH,EAAKxB,OAASwB,GAEhBC,SAAU,EAAKC,SAAU,KAI/B,6BACE,4BAAQP,UAAWC,IAAOO,QAASC,QAASV,KAAKjB,OAAjD,SAGA,4BAAQkB,UAAWC,IAAOO,QAASC,QAASV,KAAKhB,MAAjD,UAIgB,MAAnBgB,KAAKpB,MAAMS,KAAa,yBAAKY,UAAU,WAAf,IAA0B,yBAAKU,IAAKC,MAApC,KACjB,yBAAKX,UAAU,UACG,KAAjBD,KAAKpB,MAAMS,KACZ,wDAA6B,6BAA7B,WACE,gDAAsBW,KAAKpB,MAAMS,KAAjC,Y,GA1DKwB,aCkBNC,E,2MAlBblC,MAAQ,G,wEAGN,OACE,yBAAKqB,UAAU,mBACb,8CACgB,6BADhB,kCAIA,kBAAC,EAAD,CAAQA,UAAU,c,GAVRY,aCSEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,iB","file":"static/js/main.aa21a825.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1z0rN\",\"sigContainer\":\"styles_sigContainer__28i1P\",\"sigPad\":\"styles_sigPad__3yySd\",\"buttons\":\"styles_buttons__22py8\",\"sigImage\":\"styles_sigImage__pOk6b\",\"loading\":\"styles_loading__KNPiE\"};","module.exports = __webpack_public_path__ + \"static/media/loading.89387884.svg\";","import React, { Component } from \"react\";\nimport SignaturePad from \"react-signature-canvas\";\nimport loading from \"./loading.svg\"\nimport styles from \"./styles.module.css\";\nclass Canvas extends Component {\n  state = { trimmedDataURL: null };\n  sigPad = {};\n  constructor() {\n    super();\n    this.state.trimmedDataURL = null;\n    this.state.char = \"o\";\n  }\n  clear = () => {\n    this.sigPad.clear();\n  };\n  trim = () => {\n    this.setState(\n      { trimmedDataURL: this.sigPad.getTrimmedCanvas().toDataURL(\"image/png\") },\n      () => {\n        //pass the url\n        let data = \"http://localhost:3000/\" + this.state.trimmedDataURL;\n        this.setState({char: \"x\"});\n        return fetch(\"https://hiragana-search.appspot.com/img\", {\n          method: \"POST\",\n          body: JSON.stringify(data)\n        })\n          .then(res => res.json())\n          .then(data => {\n            this.setState({ char: data }, () => {\n              console.log(\"yaas!!!!\");\n            });\n          });\n      }\n    );\n  };\n  render() {\n    let { trimmedDataURL } = this.state;\n    return (\n      <div>\n      <div className={styles.container}>\n        <div className={styles.sigContainer}>\n            <SignaturePad\n              canvasProps={{ className: styles.sigPad +\" lefty\"}}\n              ref={ref => {\n                this.sigPad = ref;\n              }}\n              minWidth={3.0} maxWidth={6.0}\n            />\n            \n        </div>\n        <div>\n          <button className={styles.buttons} onClick={this.clear}  >\n            Clear\n          </button>\n          <button className={styles.buttons} onClick={this.trim}>\n            Enter\n          </button>\n          </div>\n      {this.state.char ===\"x\" ?<div className=\"loading\"> <img src={loading}></img> </div> : (\n              <div className=\"result\">\n              {this.state.char==\"o\"?\n              <h2>Draw a hiragana character<br></br> above.</h2>:\n                <h2>You have entered {this.state.char}.</h2>\n              }</div>\n            )}\n      </div>\n        </div>\n        \n      \n    );\n  }\n}\nexport default Canvas;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Canvas from './Components/canvas.jsx'\nclass App extends Component {\n  state = {  }\n  \n  render() { \n    return ( \n      <div className=\"App fullscreen \">\n        <h1>\n         Hiragana Search<br/>\n         平仮名検索    \n        </h1>\n        <Canvas className=\"flxc\">\n\n        </Canvas>\n\n      </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}